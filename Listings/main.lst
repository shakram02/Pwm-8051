C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(1,SPEED) BROWSE DEBUG OBJECTEXTEND CODE PRINT(.\Listings
                    -\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <at89c51xd2.h>
   2          
   3          #define PERIOD_MICROS (22.1184/12)  /* 8051 cycle time in microseconds */
   4          #define BYTE_SIZE 8
   5          #define NIBBLE_SIZE 4
   6          #define TO_MIRCOS 1000000 /* 10^6 to convert time in secs to micros */
   7          #define FREQ_500HZ_MICROS 2000  /* 500Hz frequency in microseconds */
   8          
   9          /* 
  10          Adjust the frequencies using this constant, 
  11          roughly approximated from listing file with assembly mapping
  12          */
  13          #define CALL_OVERHEAD 30 
  14          sbit led = P2^0; /* Use P2.0 for your output generated signal. */
  15          sbit error_led = P2^6;
  16          sbit output_ctl = P2^7; /* P2.7 to turn the output signal ON and OFF */
  17          
  18          /* Adjust mode */
  19          sbit adjust_mode= P2^5;
  20          sbit adjust_led = P2^4;
  21          
  22          typedef struct TIMER_VALS{
  23            unsigned char th;
  24            unsigned char tl;
  25          }TIMER_VALS;
  26          
  27          void adjust_state();
  28          void output_half_cycle(TIMER_VALS* tv);
  29          void error_state();
  30          int calc_micros_config(int micros,TIMER_VALS* tv);
  31          int to_micros(int);
  32          char duty_cycle(int, unsigned char);
  33          unsigned char from_bcd(unsigned char);
  34            
  35          /* ON/OFF values for duty cycle */
  36          TIMER_VALS tv_on;
  37          TIMER_VALS tv_off;
  38          
  39          void init(){
  40   1        P1 = 0;
  41   1        P2 = 0;
  42   1        /*
  43   1          P3 will be used to take the input frequency, ranges 10~990 MHz -> (1 ~ 99) in BCD * 10
  44   1        */
  45   1        P3 = 0;
  46   1        output_ctl = 1;
  47   1      }
  48          
  49          void main() using 0{
  50   1        /* Timer 0 mode 1 */
  51   1        int mics = to_micros(500);
  52   1        int freq = 800;
  53   1        unsigned char percent = 50;
  54   1        init();
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 2   

  55   1        TMOD  = 0x01;
  56   1        
  57   1        if(duty_cycle(freq ,percent)){
  58   2          error_state();
  59   2        }
  60   1        
  61   1        /* Port1 is used as input */
  62   1        TR0 = 1;
  63   1        led = 1;
  64   1        while(1){
  65   2          /*output_ctl*/
  66   2          while (!adjust_mode){
  67   3            /* Operate the timer using tv_on when it overflows, switch to tv_off */
  68   3            output_half_cycle(&tv_on);
  69   3            output_half_cycle(&tv_off);
  70   3          }
  71   2          
  72   2          // The loop is broken only when adjust_state is high
  73   2          adjust_state();   
  74   2          adjust_led = 0;
  75   2        }
  76   1      }
  77          
  78          /*
  79            Generates half the cycle of the square wave
  80          */
  81          void output_half_cycle(TIMER_VALS* tv){
  82   1        TF0 = 0;
  83   1        TH0 = tv->th;
  84   1        TL0 = tv->tl;
  85   1        while(TF0 == 0);
  86   1        led = ~led;     
  87   1      }
  88          
  89          /*
  90            Converts a frequency in hertz to us
  91          */
  92          int to_micros(int hertz){
  93   1        
  94   1        /* Not working, values are zeroed */
  95   1        double val = (1.0/(double)hertz);
  96   1        unsigned long int micros = (unsigned long int)(val * TO_MIRCOS);
  97   1        
  98   1        return (int)micros;
  99   1      }
 100          
 101          
 102          /*
 103            Sets up the PWM generator
 104          */
 105          void adjust_state(){
 106   1        /* Read P1 -> convert from BCD */
 107   1        unsigned char percent = from_bcd((unsigned char)P1);
 108   1        /* Read the frequency */
 109   1        int freq = from_bcd((unsigned char)P3)*10;  // Scale by 10 to provide a better range
 110   1        
 111   1        if (percent > (unsigned char)100)error_state();
 112   1        adjust_led = 1;
 113   1        
 114   1        if(duty_cycle(freq,percent)){
 115   2          error_state();
 116   2        }
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 3   

 117   1      }
 118          
 119          
 120          /*
 121            Unpack BCD value
 122          */
 123          unsigned char from_bcd(unsigned char val){
 124   1        
 125   1        /* value = (higher nibble*10) + (lower nibble) */
 126   1        
 127   1        unsigned char unpacked = ( (val & (unsigned char)0xF0) >> NIBBLE_SIZE)*10 + (val & (unsigned char)0x0F);
 128   1        return unpacked;
 129   1      }
 130          
 131          
 132          /*
 133            Generates the timer values for a given
 134            frequency and duty cycle
 135          */
 136          char duty_cycle(int freq, unsigned char percent){
 137   1        
 138   1        int micros = to_micros(freq);
 139   1        
 140   1        /* Simple way to avoid floating point arithmetic */
 141   1        /* 0.2 * 1000 -> 20 * (1000/100) */
 142   1        int high_micros  = percent * (micros/100);
 143   1        
 144   1        /* Use the chars to indicate error */
 145   1        /* Calculate the ON / OFF time in us */
 146   1        /* CALL_OVERHEAD is used to adjust the frequency */
 147   1        char on  = calc_micros_config(high_micros - CALL_OVERHEAD,&tv_on);
 148   1        int low_micros = micros - high_micros;  /* Use cached values, a bit poorer code readability */
 149   1        
 150   1        char off = calc_micros_config(low_micros  - CALL_OVERHEAD,&tv_off);
 151   1        return on | off;
 152   1      }
 153          
 154          
 155          /* Calculates TH and TL values to generate a given delay in us */
 156          int calc_micros_config(int micros,TIMER_VALS* tv){
 157   1        
 158   1        /* Get the number of increments required */
 159   1        int incr = micros * PERIOD_MICROS;
 160   1        int start_val;
 161   1        
 162   1        if (OV)
 163   1        {
 164   2          /* Overflow, Indicate error */
 165   2          OV = 0;
 166   2          return -1;
 167   2        }
 168   1        
 169   1        start_val = 0xFFFF - incr;
 170   1        tv->tl = start_val & 0x00FF;  /* The LOW part of the delay */
 171   1        tv->th = ((start_val & 0xFF00) >> BYTE_SIZE); /* The HIGH part of the delay */
 172   1          
 173   1        return 0;
 174   1      }
 175          
 176          
 177          /* Error state, do nothing until reset */
 178          void error_state(){
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 4   

 179   1          TMOD = 0x00;
 180   1          error_led = 1;
 181   1          while(1);
 182   1      }
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION init (BEGIN)
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0000 759000            MOV     P1,#00H
                                           ; SOURCE LINE # 41
0003 75A000            MOV     P2,#00H
                                           ; SOURCE LINE # 45
0006 75B000            MOV     P3,#00H
                                           ; SOURCE LINE # 46
0009 D2A7              SETB    output_ctl
                                           ; SOURCE LINE # 47
000B 22                RET     
             ; FUNCTION init (END)

             ; FUNCTION main (BEGIN)
0000 C0D0              PUSH    PSW
0002 75D000            MOV     PSW,#00H
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 51
0005 7FF4              MOV     R7,#0F4H
0007 7E01              MOV     R6,#01H
0009 120000      R     LCALL   _to_micros
000C 8E00        R     MOV     mics,R6
000E 8F00        R     MOV     mics+01H,R7
                                           ; SOURCE LINE # 52
0010 750003      R     MOV     freq,#03H
0013 750020      R     MOV     freq+01H,#020H
                                           ; SOURCE LINE # 53
0016 750032      R     MOV     percent,#032H
                                           ; SOURCE LINE # 54
0019 120000      R     LCALL   init
                                           ; SOURCE LINE # 55
001C 758901            MOV     TMOD,#01H
                                           ; SOURCE LINE # 57
001F AD00        R     MOV     R5,percent
0021 AF00        R     MOV     R7,freq+01H
0023 AE00        R     MOV     R6,freq
0025 120000      R     LCALL   _duty_cycle
0028 EF                MOV     A,R7
0029 6003              JZ      ?C0002
                                           ; SOURCE LINE # 58
002B 120000      R     LCALL   error_state
                                           ; SOURCE LINE # 59
002E         ?C0002:
                                           ; SOURCE LINE # 62
002E D28C              SETB    TR0
                                           ; SOURCE LINE # 63
0030 D2A0              SETB    led
                                           ; SOURCE LINE # 64
0032         ?C0005:
                                           ; SOURCE LINE # 66
0032 20A514            JB      adjust_mode,?C0006
                                           ; SOURCE LINE # 68
0035 7B00              MOV     R3,#00H
0037 7A00        R     MOV     R2,#HIGH tv_on
0039 7900        R     MOV     R1,#LOW tv_on
003B 120000      R     LCALL   _output_half_cycle
                                           ; SOURCE LINE # 69
003E 7B00              MOV     R3,#00H
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 6   

0040 7A00        R     MOV     R2,#HIGH tv_off
0042 7900        R     MOV     R1,#LOW tv_off
0044 120000      R     LCALL   _output_half_cycle
                                           ; SOURCE LINE # 70
0047 80E9              SJMP    ?C0005
0049         ?C0006:
                                           ; SOURCE LINE # 73
0049 120000      R     LCALL   adjust_state
                                           ; SOURCE LINE # 74
004C C2A4              CLR     adjust_led
                                           ; SOURCE LINE # 75
004E 80E2              SJMP    ?C0005
                                           ; SOURCE LINE # 76
0050 D0D0              POP     PSW
0052 22                RET     
             ; FUNCTION main (END)

             ; FUNCTION _output_half_cycle (BEGIN)
                                           ; SOURCE LINE # 81
0000 8B00        R     MOV     tv,R3
0002 8A00        R     MOV     tv+01H,R2
0004 8900        R     MOV     tv+02H,R1
                                           ; SOURCE LINE # 82
0006 C28D              CLR     TF0
                                           ; SOURCE LINE # 83
0008 AB00        R     MOV     R3,tv
000A AA00        R     MOV     R2,tv+01H
000C A900        R     MOV     R1,tv+02H
000E 120000      E     LCALL   ?C?CLDPTR
0011 FF                MOV     R7,A
0012 8F8C              MOV     TH0,R7
                                           ; SOURCE LINE # 84
0014 AB00        R     MOV     R3,tv
0016 AA00        R     MOV     R2,tv+01H
0018 A900        R     MOV     R1,tv+02H
001A 758201            MOV     DPL,#01H
001D 758300            MOV     DPH,#00H
0020 120000      E     LCALL   ?C?CLDOPTR
0023 FF                MOV     R7,A
0024 8F8A              MOV     TL0,R7
0026         ?C0008:
                                           ; SOURCE LINE # 85
0026 308DFD            JNB     TF0,?C0008
0029         ?C0009:
                                           ; SOURCE LINE # 86
0029 B2A0              CPL     led
                                           ; SOURCE LINE # 87
002B 22                RET     
             ; FUNCTION _output_half_cycle (END)

             ; FUNCTION _to_micros (BEGIN)
                                           ; SOURCE LINE # 92
0000 8E00        R     MOV     hertz,R6
0002 8F00        R     MOV     hertz+01H,R7
                                           ; SOURCE LINE # 95
0004 AC00        R     MOV     R4,hertz
0006 AD00        R     MOV     R5,hertz+01H
0008 EC                MOV     A,R4
0009 120000      E     LCALL   ?C?FCASTI
000C A804              MOV     R0,AR4
000E A905              MOV     R1,AR5
0010 AA06              MOV     R2,AR6
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 7   

0012 AB07              MOV     R3,AR7
0014 7F00              MOV     R7,#00H
0016 7E00              MOV     R6,#00H
0018 7D80              MOV     R5,#080H
001A 7C3F              MOV     R4,#03FH
001C 120000      E     LCALL   ?C?FPDIV
001F 8F00        R     MOV     val+03H,R7
0021 8E00        R     MOV     val+02H,R6
0023 8D00        R     MOV     val+01H,R5
0025 8C00        R     MOV     val,R4
                                           ; SOURCE LINE # 96
0027 7F00              MOV     R7,#00H
0029 7E24              MOV     R6,#024H
002B 7D74              MOV     R5,#074H
002D 7C49              MOV     R4,#049H
002F AB00        R     MOV     R3,val+03H
0031 AA00        R     MOV     R2,val+02H
0033 A900        R     MOV     R1,val+01H
0035 A800        R     MOV     R0,val
0037 120000      E     LCALL   ?C?FPMUL
003A 120000      E     LCALL   ?C?CASTF
003D 8F00        R     MOV     micros+03H,R7
003F 8E00        R     MOV     micros+02H,R6
0041 8D00        R     MOV     micros+01H,R5
0043 8C00        R     MOV     micros,R4
                                           ; SOURCE LINE # 98
0045 AE00        R     MOV     R6,micros+02H
0047 AF00        R     MOV     R7,micros+03H
                                           ; SOURCE LINE # 99
0049         ?C0011:
0049 22                RET     
             ; FUNCTION _to_micros (END)

             ; FUNCTION adjust_state (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
0000 AF90              MOV     R7,P1
0002 120000      R     LCALL   _from_bcd
0005 8F00        R     MOV     percent,R7
                                           ; SOURCE LINE # 109
0007 AFB0              MOV     R7,P3
0009 120000      R     LCALL   _from_bcd
000C 7E0A              MOV     R6,#0AH
000E EF                MOV     A,R7
000F 8EF0              MOV     B,R6
0011 A4                MUL     AB
0012 FF                MOV     R7,A
0013 AEF0              MOV     R6,B
0015 8E00        R     MOV     freq,R6
0017 8F00        R     MOV     freq+01H,R7
                                           ; SOURCE LINE # 111
0019 E500        R     MOV     A,percent
001B D3                SETB    C
001C 9464              SUBB    A,#064H
001E 4003              JC      ?C0012
0020 120000      R     LCALL   error_state
0023         ?C0012:
                                           ; SOURCE LINE # 112
0023 D2A4              SETB    adjust_led
                                           ; SOURCE LINE # 114
0025 AD00        R     MOV     R5,percent
0027 AF00        R     MOV     R7,freq+01H
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 8   

0029 AE00        R     MOV     R6,freq
002B 120000      R     LCALL   _duty_cycle
002E EF                MOV     A,R7
002F 6003              JZ      ?C0014
                                           ; SOURCE LINE # 115
0031 120000      R     LCALL   error_state
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
0034         ?C0014:
0034 22                RET     
             ; FUNCTION adjust_state (END)

             ; FUNCTION _from_bcd (BEGIN)
                                           ; SOURCE LINE # 123
0000 8F00        R     MOV     val,R7
                                           ; SOURCE LINE # 127
0002 E500        R     MOV     A,val
0004 54F0              ANL     A,#0F0H
0006 FF                MOV     R7,A
0007 EF                MOV     A,R7
0008 C4                SWAP    A
0009 540F              ANL     A,#0FH
000B FF                MOV     R7,A
000C EF                MOV     A,R7
000D 75F00A            MOV     B,#0AH
0010 A4                MUL     AB
0011 FF                MOV     R7,A
0012 E500        R     MOV     A,val
0014 540F              ANL     A,#0FH
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 2E                ADD     A,R6
0019 F500        R     MOV     unpacked,A
                                           ; SOURCE LINE # 128
001B AF00        R     MOV     R7,unpacked
                                           ; SOURCE LINE # 129
001D         ?C0015:
001D 22                RET     
             ; FUNCTION _from_bcd (END)

             ; FUNCTION _duty_cycle (BEGIN)
                                           ; SOURCE LINE # 136
0000 8E00        R     MOV     freq,R6
0002 8F00        R     MOV     freq+01H,R7
0004 8D00        R     MOV     percent,R5
                                           ; SOURCE LINE # 138
0006 AF00        R     MOV     R7,freq+01H
0008 AE00        R     MOV     R6,freq
000A 120000      R     LCALL   _to_micros
000D 8E00        R     MOV     micros,R6
000F 8F00        R     MOV     micros+01H,R7
                                           ; SOURCE LINE # 142
0011 AE00        R     MOV     R6,micros
0013 AF00        R     MOV     R7,micros+01H
0015 7C00              MOV     R4,#00H
0017 7D64              MOV     R5,#064H
0019 120000      E     LCALL   ?C?SIDIV
001C AD00        R     MOV     R5,percent
001E 7C00              MOV     R4,#00H
0020 120000      E     LCALL   ?C?IMUL
0023 8E00        R     MOV     high_micros,R6
0025 8F00        R     MOV     high_micros+01H,R7
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 9   

                                           ; SOURCE LINE # 147
0027 E500        R     MOV     A,high_micros+01H
0029 24E2              ADD     A,#0E2H
002B FF                MOV     R7,A
002C E500        R     MOV     A,high_micros
002E 34FF              ADDC    A,#0FFH
0030 FE                MOV     R6,A
0031 7B00              MOV     R3,#00H
0033 7A00        R     MOV     R2,#HIGH tv_on
0035 7900        R     MOV     R1,#LOW tv_on
0037 120000      R     LCALL   _calc_micros_config
003A 8F00        R     MOV     on,R7
                                           ; SOURCE LINE # 148
003C C3                CLR     C
003D E500        R     MOV     A,micros+01H
003F 9500        R     SUBB    A,high_micros+01H
0041 F500        R     MOV     low_micros+01H,A
0043 E500        R     MOV     A,micros
0045 9500        R     SUBB    A,high_micros
0047 F500        R     MOV     low_micros,A
                                           ; SOURCE LINE # 150
0049 E500        R     MOV     A,low_micros+01H
004B 24E2              ADD     A,#0E2H
004D FF                MOV     R7,A
004E E500        R     MOV     A,low_micros
0050 34FF              ADDC    A,#0FFH
0052 FE                MOV     R6,A
0053 7B00              MOV     R3,#00H
0055 7A00        R     MOV     R2,#HIGH tv_off
0057 7900        R     MOV     R1,#LOW tv_off
0059 120000      R     LCALL   _calc_micros_config
005C 8F00        R     MOV     off,R7
                                           ; SOURCE LINE # 151
005E E500        R     MOV     A,on
0060 4500        R     ORL     A,off
0062 FF                MOV     R7,A
                                           ; SOURCE LINE # 152
0063         ?C0016:
0063 22                RET     
             ; FUNCTION _duty_cycle (END)

             ; FUNCTION _calc_micros_config (BEGIN)
                                           ; SOURCE LINE # 156
0000 8E00        R     MOV     micros,R6
0002 8F00        R     MOV     micros+01H,R7
0004 8B00        R     MOV     tv,R3
0006 8A00        R     MOV     tv+01H,R2
0008 8900        R     MOV     tv+02H,R1
                                           ; SOURCE LINE # 159
000A AC00        R     MOV     R4,micros
000C AD00        R     MOV     R5,micros+01H
000E EC                MOV     A,R4
000F 120000      E     LCALL   ?C?FCASTI
0012 7BFB              MOV     R3,#0FBH
0014 7AED              MOV     R2,#0EDH
0016 79EB              MOV     R1,#0EBH
0018 783F              MOV     R0,#03FH
001A 120000      E     LCALL   ?C?FPMUL
001D 120000      E     LCALL   ?C?CASTF
0020 8E00        R     MOV     incr,R6
0022 8F00        R     MOV     incr+01H,R7
                                           ; SOURCE LINE # 162
C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 10  

0024 30D207            JNB     OV,?C0017
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 165
0027 C2D2              CLR     OV
                                           ; SOURCE LINE # 166
0029 7EFF              MOV     R6,#0FFH
002B 7FFF              MOV     R7,#0FFH
002D 22                RET     
                                           ; SOURCE LINE # 167
002E         ?C0017:
                                           ; SOURCE LINE # 169
002E C3                CLR     C
002F 74FF              MOV     A,#0FFH
0031 9500        R     SUBB    A,incr+01H
0033 F500        R     MOV     start_val+01H,A
0035 74FF              MOV     A,#0FFH
0037 9500        R     SUBB    A,incr
0039 F500        R     MOV     start_val,A
                                           ; SOURCE LINE # 170
003B AF00        R     MOV     R7,start_val+01H
003D EF                MOV     A,R7
003E 54FF              ANL     A,#0FFH
0040 FF                MOV     R7,A
0041 AB00        R     MOV     R3,tv
0043 AA00        R     MOV     R2,tv+01H
0045 A900        R     MOV     R1,tv+02H
0047 758201            MOV     DPL,#01H
004A 758300            MOV     DPH,#00H
004D EF                MOV     A,R7
004E 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 171
0051 AE00        R     MOV     R6,start_val
0053 7F00              MOV     R7,#00H
0055 EE                MOV     A,R6
0056 FF                MOV     R7,A
0057 7E00              MOV     R6,#00H
0059 AB00        R     MOV     R3,tv
005B AA00        R     MOV     R2,tv+01H
005D A900        R     MOV     R1,tv+02H
005F EF                MOV     A,R7
0060 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 173
0063 E4                CLR     A
0064 7E00              MOV     R6,#00H
0066 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 174
0068         ?C0018:
0068 22                RET     
             ; FUNCTION _calc_micros_config (END)

             ; FUNCTION error_state (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0000 758900            MOV     TMOD,#00H
                                           ; SOURCE LINE # 180
0003 D2A6              SETB    error_led
0005         ?C0019:
                                           ; SOURCE LINE # 181
0005 80FE              SJMP    ?C0019
0007 22                RET     
             ; FUNCTION error_state (END)

C51 COMPILER V9.56.0.0   MAIN                                                              04/27/2017 22:39:46 PAGE 11  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    509    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
